// Copyright Parity Technologies (UK) Ltd.
// This file is part of Cumulus.

// Cumulus is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// Cumulus is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with Cumulus.  If not, see <http://www.gnu.org/licenses/>.

//! Autogenerated weights for `snowbridge_basic_channel::outbound`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-03-28, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `ip-172-31-4-183`, CPU: `Intel(R) Xeon(R) Platinum 8259CL CPU @ 2.50GHz`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("bridge-hub-rococo-dev"), DB CACHE: 1024

// Executed Command:
// ./artifacts/polkadot-parachain
// benchmark
// pallet
// --chain=bridge-hub-rococo-dev
// --execution=wasm
// --wasm-execution=compiled
// --pallet=snowbridge_basic_channel::outbound
// --extrinsic=*
// --steps=50
// --repeat=20
// --json
// --header=./file_header.txt
// --output=./parachains/runtimes/bridge-hubs/bridge-hub-rococo/src/weights/snowbridge_basic_channel_outbound.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::Weight};
use sp_std::marker::PhantomData;

/// Weight functions for `snowbridge_basic_channel::outbound`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> snowbridge_basic_channel::outbound::WeightInfo for WeightInfo<T> {
	/// Storage: BasicOutboundChannel MessageQueue (r:1 w:1)
	/// Proof: BasicOutboundChannel MessageQueue (max_values: Some(1), max_size: Some(5961), added: 6456, mode: MaxEncodedLen)
	/// Storage: System Digest (r:1 w:1)
	/// Proof Skipped: System Digest (max_values: Some(1), max_size: None, mode: Measured)
	/// The range of component `m` is `[1, 20]`.
	/// The range of component `p` is `[0, 255]`.
	fn on_commit(m: u32, p: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0 + m * (290 ±0) + p * (20 ±0)`
		//  Estimated: `9314 + m * (114 ±2) + p * (7 ±0)`
		// Minimum execution time: 46_170_000 picoseconds.
		Weight::from_parts(46_620_000, 0)
			.saturating_add(Weight::from_parts(0, 9314))
			// Standard Error: 70_228
			.saturating_add(Weight::from_parts(13_877_868, 0).saturating_mul(m.into()))
			// Standard Error: 5_497
			.saturating_add(Weight::from_parts(107_283, 0).saturating_mul(p.into()))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(2))
			.saturating_add(Weight::from_parts(0, 114).saturating_mul(m.into()))
			.saturating_add(Weight::from_parts(0, 7).saturating_mul(p.into()))
	}
	fn on_commit_no_messages() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 429_000 picoseconds.
		Weight::from_parts(454_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
	}
}
