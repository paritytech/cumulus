// Copyright 2021 Parity Technologies (UK) Ltd.
// This file is part of Cumulus.

// Cumulus is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// Cumulus is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with Cumulus.  If not, see <http://www.gnu.org/licenses/>.

//! Autogenerated weights for `cumulus_pallet_parachain_system`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2022-10-06, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! HOSTNAME: `oty-parity`, CPU: `11th Gen Intel(R) Core(TM) i7-1165G7 @ 2.80GHz`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("westmint-dev"), DB CACHE: 1024

// Executed Command:
// ./target/release/polkadot-parachain
// benchmark
// pallet
// --chain=westmint-dev
// --execution=wasm
// --wasm-execution=compiled
// --pallet=cumulus_pallet_parachain_system
// --extrinsic=
// --steps=50
// --repeat=20
// --header=./file_header.txt
// --output=parachains/runtimes/assets/westmint/src/weights

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::Weight};
use sp_std::marker::PhantomData;

/// Weight functions for `cumulus_pallet_parachain_system`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> cumulus_pallet_parachain_system::WeightInfo for WeightInfo<T> {
	// Storage: ParachainSystem AuthorizedUpgrade (r:0 w:1)
	fn authorize_upgrade() -> Weight {
		Weight::from_ref_time(28_693_000 as u64)
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: ParachainSystem HostConfiguration (r:1 w:0)
	// Storage: ParachainSystem PendingUpwardMessages (r:1 w:1)
	/// The range of component `l` is `[0, 256]`.
	fn sudo_send_upward_message(l: u32, ) -> Weight {
		Weight::from_ref_time(11_851_000 as u64)
			// Standard Error: 980
			.saturating_add(Weight::from_ref_time(14_051 as u64).saturating_mul(l as u64))
			.saturating_add(T::DbWeight::get().reads(2 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: ParachainSystem AuthorizedUpgrade (r:1 w:1)
	// Storage: ParachainSystem ValidationData (r:1 w:0)
	// Storage: ParachainSystem UpgradeRestrictionSignal (r:1 w:0)
	// Storage: ParachainSystem PendingValidationCode (r:1 w:1)
	// Storage: ParachainSystem HostConfiguration (r:1 w:0)
	// Storage: ParachainSystem NewValidationCode (r:0 w:1)
	// Storage: ParachainSystem DidSetValidationCode (r:0 w:1)
	/// The range of component `s` is `[0, 2097152]`.
	fn enact_authorized_upgrade(s: u32, ) -> Weight {
		Weight::from_ref_time(31_034_000 as u64)
			// Standard Error: 8
			.saturating_add(Weight::from_ref_time(1_912 as u64).saturating_mul(s as u64))
			.saturating_add(T::DbWeight::get().reads(5 as u64))
			.saturating_add(T::DbWeight::get().writes(4 as u64))
	}
	// Storage: ParachainSystem ValidationData (r:1 w:1)
	// Storage: ParachainSystem LastRelayChainBlockNumber (r:1 w:1)
	// Storage: ParachainInfo ParachainId (r:1 w:0)
	// Storage: ParachainSystem LastDmqMqcHead (r:1 w:0)
	// Storage: ParachainSystem LastHrmpMqcHeads (r:1 w:1)
	// Storage: ParachainSystem ReservedXcmpWeightOverride (r:1 w:0)
	// Storage: XcmpQueue InboundXcmpStatus (r:1 w:1)
	// Storage: XcmpQueue QueueConfig (r:1 w:0)
	// Storage: XcmpQueue QueueSuspended (r:1 w:0)
	// Storage: ParachainSystem RelevantMessagingState (r:0 w:1)
	// Storage: ParachainSystem HrmpWatermark (r:0 w:1)
	// Storage: ParachainSystem RelayStateProof (r:0 w:1)
	// Storage: ParachainSystem HostConfiguration (r:0 w:1)
	// Storage: ParachainSystem ProcessedDownwardMessages (r:0 w:1)
	// Storage: ParachainSystem UpgradeRestrictionSignal (r:0 w:1)
	fn set_validation_data() -> Weight {
		Weight::from_ref_time(51_662_000 as u64)
			.saturating_add(T::DbWeight::get().reads(9 as u64))
			.saturating_add(T::DbWeight::get().writes(10 as u64))
	}
}
