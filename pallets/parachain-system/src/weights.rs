// Copyright 2020 Parity Technologies (UK) Ltd.
// This file is part of Cumulus.

// Cumulus is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// Cumulus is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with Cumulus.  If not, see <http://www.gnu.org/licenses/>.

//! Autogenerated weights for pallet_parachain_system
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2022-12-21, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("westmint-dev"), DB CACHE: 1024

#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{
	traits::Get,
	weights::{constants::RocksDbWeight, Weight},
};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_parachain_system.
pub trait WeightInfo {
	#[rustfmt::skip]
	fn set_validation_data_no_messages() -> Weight;
	#[rustfmt::skip]
	fn sudo_send_upward_message() -> Weight;
	#[rustfmt::skip]
	fn authorize_upgrade() -> Weight;
	#[rustfmt::skip]
	fn enact_authorized_upgrade() -> Weight;
}

/// Weights for pallet_parachain_system using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	// Storage: ParachainSystem ValidationData (r:1 w:1)
	// Storage: ParachainSystem LastRelayChainBlockNumber (r:1 w:1)
	// Storage: ParachainInfo ParachainId (r:1 w:0)
	// Storage: ParachainSystem LastDmqMqcHead (r:1 w:0)
	// Storage: ParachainSystem LastHrmpMqcHeads (r:1 w:1)
	// Storage: ParachainSystem ReservedXcmpWeightOverride (r:1 w:0)
	// Storage: XcmpQueue InboundXcmpStatus (r:1 w:1)
	// Storage: XcmpQueue QueueConfig (r:1 w:0)
	// Storage: XcmpQueue QueueSuspended (r:1 w:0)
	// Storage: ParachainSystem RelevantMessagingState (r:0 w:1)
	// Storage: ParachainSystem HrmpWatermark (r:0 w:1)
	// Storage: ParachainSystem RelayStateProof (r:0 w:1)
	// Storage: ParachainSystem HostConfiguration (r:0 w:1)
	// Storage: ParachainSystem ProcessedDownwardMessages (r:0 w:1)
	// Storage: ParachainSystem UpgradeRestrictionSignal (r:0 w:1)
	#[rustfmt::skip]
	fn set_validation_data_no_messages() -> Weight {
		(42_259_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(9 as u64))
			.saturating_add(T::DbWeight::get().writes(10 as u64))
	}
	// Storage: ParachainSystem HostConfiguration (r:1 w:0)
	// Storage: ParachainSystem PendingUpwardMessages (r:1 w:1)
	#[rustfmt::skip]
	fn sudo_send_upward_message() -> Weight {
		(4_669_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(2 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: ParachainSystem AuthorizedUpgrade (r:0 w:1)
	#[rustfmt::skip]
	fn authorize_upgrade() -> Weight {
		(12_872_000 as Weight)
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: ParachainSystem AuthorizedUpgrade (r:1 w:1)
	// Storage: ParachainSystem ValidationData (r:1 w:0)
	// Storage: ParachainSystem UpgradeRestrictionSignal (r:1 w:0)
	// Storage: ParachainSystem PendingValidationCode (r:1 w:1)
	// Storage: ParachainSystem HostConfiguration (r:1 w:0)
	// Storage: ParachainSystem NewValidationCode (r:0 w:1)
	// Storage: ParachainSystem DidSetValidationCode (r:0 w:1)
	#[rustfmt::skip]
	fn enact_authorized_upgrade() -> Weight {
		(25_830_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(5 as u64))
			.saturating_add(T::DbWeight::get().writes(4 as u64))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	// Storage: ParachainSystem ValidationData (r:1 w:1)
	// Storage: ParachainSystem LastRelayChainBlockNumber (r:1 w:1)
	// Storage: ParachainInfo ParachainId (r:1 w:0)
	// Storage: ParachainSystem LastDmqMqcHead (r:1 w:0)
	// Storage: ParachainSystem LastHrmpMqcHeads (r:1 w:1)
	// Storage: ParachainSystem ReservedXcmpWeightOverride (r:1 w:0)
	// Storage: XcmpQueue InboundXcmpStatus (r:1 w:1)
	// Storage: XcmpQueue QueueConfig (r:1 w:0)
	// Storage: XcmpQueue QueueSuspended (r:1 w:0)
	// Storage: ParachainSystem RelevantMessagingState (r:0 w:1)
	// Storage: ParachainSystem HrmpWatermark (r:0 w:1)
	// Storage: ParachainSystem RelayStateProof (r:0 w:1)
	// Storage: ParachainSystem HostConfiguration (r:0 w:1)
	// Storage: ParachainSystem ProcessedDownwardMessages (r:0 w:1)
	// Storage: ParachainSystem UpgradeRestrictionSignal (r:0 w:1)
	#[rustfmt::skip]
	fn set_validation_data_no_messages() -> Weight {
		(42_259_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(9 as u64))
			.saturating_add(RocksDbWeight::get().writes(10 as u64))
	}
	// Storage: ParachainSystem HostConfiguration (r:1 w:0)
	// Storage: ParachainSystem PendingUpwardMessages (r:1 w:1)
	#[rustfmt::skip]
	fn sudo_send_upward_message() -> Weight {
		(4_669_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(2 as u64))
			.saturating_add(RocksDbWeight::get().writes(1 as u64))
	}
	// Storage: ParachainSystem AuthorizedUpgrade (r:0 w:1)
	#[rustfmt::skip]
	fn authorize_upgrade() -> Weight {
		(12_872_000 as Weight)
			.saturating_add(RocksDbWeight::get().writes(1 as u64))
	}
	// Storage: ParachainSystem AuthorizedUpgrade (r:1 w:1)
	// Storage: ParachainSystem ValidationData (r:1 w:0)
	// Storage: ParachainSystem UpgradeRestrictionSignal (r:1 w:0)
	// Storage: ParachainSystem PendingValidationCode (r:1 w:1)
	// Storage: ParachainSystem HostConfiguration (r:1 w:0)
	// Storage: ParachainSystem NewValidationCode (r:0 w:1)
	// Storage: ParachainSystem DidSetValidationCode (r:0 w:1)
	#[rustfmt::skip]
	fn enact_authorized_upgrade() -> Weight {
		(25_830_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(5 as u64))
			.saturating_add(RocksDbWeight::get().writes(4 as u64))
	}
}
